
import os
import logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes,
)

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

SERVICE, NAME, PHONE, ADDRESS = range(4)
ADMIN_ID = 1066431129

services = {
    "–ë–æ—Ä—å–±–∞ —Å –≥—Ä—ã–∑—É–Ω–∞–º–∏": "–æ—Ç 4 000 ‚Ç∏",
    "–ë–æ—Ä—å–±–∞ —Å –Ω–∞—Å–µ–∫–æ–º—ã–º–∏": "–æ—Ç 5 000 ‚Ç∏",
    "–ë–æ—Ä—å–±–∞ —Å –º–∏–∫—Ä–æ–±–∞–º–∏": "–æ—Ç 6 000 ‚Ç∏",
}

reply_keyboard = [[service] for service in services]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
phone_button = KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)
phone_markup = ReplyKeyboardMarkup([[phone_button]], one_time_keyboard=True, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
    return SERVICE

async def get_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    service = update.message.text
    if service not in services:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
        return SERVICE
    context.user_data["service"] = service
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=phone_markup)
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact = update.message.contact
    if contact:
        phone_number = contact.phone_number
    else:
        phone_number = update.message.text
    context.user_data["phone"] = phone_number
    await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å.")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["address"] = update.message.text
    service = context.user_data["service"]
    name = context.user_data["name"]
    phone = context.user_data["phone"]
    address = context.user_data["address"]
    price = services.get(service, "—É—Ç–æ—á–Ω—è–µ—Ç—Å—è")

    await update.message.reply_text(
        f"–°–ø–∞—Å–∏–±–æ, {name}!
"
        f"–£—Å–ª—É–≥–∞: {service}
"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}
"
        f"–ê–¥—Ä–µ—Å: {address}
"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price}

"
        f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
    )

    admin_msg = (
        f"üì• –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:

"
        f"üë§ –ò–º—è: {name}
"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
"
        f"üìç –ê–¥—Ä–µ—Å: {address}
"
        f"üõ† –£—Å–ª—É–≥–∞: {service}
"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}"
    )
    await context.bot.send_message(chat_id=ADMIN_ID, text=admin_msg)
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω—ë–Ω. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!")
    return ConversationHandler.END

if __name__ == "__main__":
    TOKEN = os.getenv("BOT_TOKEN")
    app = ApplicationBuilder().token(TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_service)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [
                MessageHandler(filters.CONTACT, get_phone),
                MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone),
            ],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    app.add_handler(conv_handler)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
